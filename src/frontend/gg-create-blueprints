#!/bin/bash -ef

if [ $# -lt 1 ]; then
  echo "Usage: $(basename $0) [-f FILTERS] [-x EXCLUDES] DIRECTORY"
  exit 1
fi

# TODO we should lock the index file before changing it

FILTERS_FILE=''
EXCLUDES_FILE=''
BLUEPRINTS_HOME=${XDG_CACHE_HOME:-${HOME}/.cache}/gg/blueprints
INDEX_FILE=${BLUEPRINTS_HOME}/index
NPROC=$(nproc)

while getopts "x:f:" opt; do
  case ${opt} in
    x )
      EXCLUDES_FILE=$OPTARG
      ;;
    f )
      FILTERS_FILE=$OPTARG
      ;;
    \? )
      echo "Invalid option: -$OPTARG"
      exit 1
      ;;
  esac
done
shift $((OPTIND-1))

SOURCE_DIR=$(readlink -f $1)

FILTERS_OPTS=()
if [ ! -z "${FILTERS_FILE}" ]; then
  while read -r FILE
  do
    if [ ${#FILTERS_OPTS[@]} -gt 0 ]; then
      FILTERS_OPTS+=("-o")
    fi
    FILTERS_OPTS+=("-ipath" "$FILE")
  done <${FILTERS_FILE}
  FILTERS_OPTS=( \( "${FILTERS_OPTS[@]}" \) )
else
  FILTERS_OPTS=("-ipath" '*')
fi

EXCLUDES_OPTS=()
if [ ! -z "${EXCLUDES_FILE}" ]; then
  while read -r FILE
  do
    EXCLUDES_OPTS+=("-not" "-ipath" "$FILE")
  done <${EXCLUDES_FILE}
  EXCLUDES_OPTS=( \( "${EXCLUDES_OPTS[@]}" \) )
else
  EXCLUDES_OPTS=()
fi

mkdir -p ${BLUEPRINTS_HOME}

TEMPDIR=$(mktemp -d)
trap "rm -rf $TEMPDIR" EXIT

function process_directory {
  srcdir=$(readlink -f ${1?source dir is empty})
  dstdir=$(readlink -f ${2?destination dir is empty})

  ( find ${srcdir} -type f ${FILTERS_OPTS[@]} -type f ${EXCLUDES_OPTS[@]} | tee /dev/tty |
      xargs -P ${NPROC} -I% -- sh -c \
        'mkdir -p "'"${dstdir}"'/$(dirname "%")"; HASH=$(gg-hash "%"); echo "// GGHASH:${HASH}" >"'"${dstdir}"'/%"; cat "%" | splice-lines | cpp -fpreprocessed -P -dD -w - 2>/dev/null | prune-file >>"'"${dstdir}"'/%"' ) || true
}

function create_tarball {
  srcdir=${1?source dir is empty}
  dsttar=$(mktemp ${TEMPDIR}/output.XXXXXXXX)

  tar zcf ${dsttar} -C ${srcdir} .
  tar_hash=$(gg-hash ${dsttar})
  mv ${dsttar} ${BLUEPRINTS_HOME}/${tar_hash}

  echo "${tar_hash}"
}

TARGET_DIR=$(mktemp -d ${TEMPDIR}/sources.XXXXXXXX)

process_directory "${SOURCE_DIR}" "${TARGET_DIR}"
TAR_HASH=$(create_tarball "${TARGET_DIR}")

echo "${TAR_HASH} ${SOURCE_DIR}" | tee -a ${INDEX_FILE}
echo "$(sort -r -k2 ${INDEX_FILE})" >${INDEX_FILE}
